// src/components/assessment/GoalSetting.tsx
'use client';

import { useState } from 'react';

interface GoalSettingProps {
  currentScore: number;
  onGoalsSet: () => void;
}

export const GoalSetting: React.FC<GoalSettingProps> = ({ 
  currentScore, 
  onGoalsSet 
}) => {
  const [formData, setFormData] = useState({
    targetScore: Math.min(currentScore + 20, 100),
    examDate: '',
    availableHoursPerWeek: 10,
  });
  const [isGenerating, setIsGenerating] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    setIsGenerating(true);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ localStorage
      const savedResults = localStorage.getItem('assessmentResults');
      const assessmentResults = savedResults ? JSON.parse(savedResults) : {};
      const assessmentId = localStorage.getItem('lastAssessmentId');
      const userId = localStorage.getItem('currentUserId') || 'user-' + Date.now();

      console.log('üìä Using SQLite assessment data:', {
        assessmentId,
        userId,
        savedResults: assessmentResults
      });

      const userData = {
        userId: userId,
        assessmentId: assessmentId, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞ –≤ SQLite –ë–î
        currentScore: currentScore,
        targetScore: formData.targetScore,
        examDate: formData.examDate,
        availableHoursPerWeek: formData.availableHoursPerWeek,
        weakAreas: assessmentResults.weakAreas || [],
        strongAreas: assessmentResults.strongAreas || [],
        subject: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
        testResults: {
          totalQuestions: assessmentResults.totalQuestions,
          correctAnswers: assessmentResults.correctAnswers,
          estimatedScore: currentScore
        }
      };

      console.log('üöÄ Generating plan with SQLite data:', userData);

      const response = await fetch('/api/generate-plan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
      });

      const result = await response.json();
      
      if (result.success) {
        const fullPlan = {
          id: `plan-${Date.now()}`,
          userId: userData.userId,
          assessmentId: userData.assessmentId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Å —Ç–µ—Å—Ç–æ–º –≤ SQLite –ë–î
          ...result.plan,
          currentScore: userData.currentScore,
          targetScore: userData.targetScore,
          examDate: userData.examDate,
          availableHoursPerWeek: userData.availableHoursPerWeek,
          createdAt: new Date().toISOString(),
          progress: 0,
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
          originalTestResults: {
            totalQuestions: userData.testResults.totalQuestions,
            correctAnswers: userData.testResults.correctAnswers,
            estimatedScore: userData.currentScore
          }
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ localStorage
        localStorage.setItem('studyPlan', JSON.stringify(fullPlan));
        console.log('‚úÖ Study plan saved to localStorage with SQLite reference:', fullPlan);
        
        onGoalsSet();
      } else {
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞: ${result.error}`);
      }
    } catch (error) {
      console.error('Error generating plan:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è');
    } finally {
      setIsGenerating(false);
    }
  };

  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –¥–∞—Ç—É —ç–∫–∑–∞–º–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞)
  const getDefaultExamDate = () => {
    const date = new Date();
    date.setMonth(date.getMonth() + 3);
    return date.toISOString().split('T')[0];
  };

  return (
    <div className="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-lg">
      <h2 className="text-2xl font-bold text-gray-900 mb-6">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–π –æ–±—É—á–µ–Ω–∏—è</h2>
      
      <form onSubmit={handleSubmit} className="space-y-6">
        {/* –¶–µ–ª–µ–≤–æ–π –±–∞–ª–ª */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –¶–µ–ª–µ–≤–æ–π –±–∞–ª–ª –Ω–∞ –ï–ì–≠
          </label>
          <div className="flex items-center space-x-4">
            <span className="text-sm text-gray-500">–¢–µ–∫—É—â–∏–π: {currentScore}%</span>
            <input
              type="range"
              min={currentScore + 5}
              max={100}
              value={formData.targetScore}
              onChange={(e) => setFormData({...formData, targetScore: parseInt(e.target.value)})}
              className="flex-1"
            />
            <span className="text-lg font-semibold text-blue-600">{formData.targetScore}%</span>
          </div>
          <p className="text-sm text-gray-500 mt-2">
            –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: {Math.min(currentScore + 20, 100)}% (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Ü–µ–ª—å)
          </p>
        </div>

        {/* –î–∞—Ç–∞ —ç–∫–∑–∞–º–µ–Ω–∞ */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –î–∞—Ç–∞ —ç–∫–∑–∞–º–µ–Ω–∞
          </label>
          <input
            type="date"
            required
            value={formData.examDate}
            onChange={(e) => setFormData({...formData, examDate: e.target.value})}
            min={new Date().toISOString().split('T')[0]}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <p className="text-sm text-gray-500 mt-2">
            –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ï–ì–≠
          </p>
        </div>

        {/* –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –≤ –Ω–µ–¥–µ–ª—é (—á–∞—Å–æ–≤)
          </label>
          <select
            value={formData.availableHoursPerWeek}
            onChange={(e) => setFormData({...formData, availableHoursPerWeek: parseInt(e.target.value)})}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value={5}>5 —á–∞—Å–æ–≤ (–º–∏–Ω–∏–º—É–º)</option>
            <option value={10}>10 —á–∞—Å–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</option>
            <option value={15}>15 —á–∞—Å–æ–≤ (–∏–Ω—Ç–µ–Ω—Å–∏–≤)</option>
            <option value={20}>20 —á–∞—Å–æ–≤ (–º–∞–∫—Å–∏–º—É–º)</option>
          </select>
          <p className="text-sm text-gray-500 mt-2">
            –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤–∞—à—É —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex justify-between pt-6">
          <button
            type="button"
            onClick={() => window.history.back()}
            className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
            disabled={isGenerating}
          >
            –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
          </button>
          <button
            type="submit"
            disabled={isGenerating}
            className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default GoalSetting;