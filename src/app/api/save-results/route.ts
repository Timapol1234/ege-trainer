import { NextRequest, NextResponse } from 'next/server';
import { saveTestResult } from '@/lib/services/testResultsService';

export async function POST(request: NextRequest) {
  try {
    const data = await request.json();
    
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞:', data);
    
    const { userId, subject, score, totalQuestions, correctAnswers, timeSpent, testData } = data;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!userId || !subject || score === undefined || score === null) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', { userId, subject, score });
      return NextResponse.json(
        { error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: userId, subject, score' },
        { status: 400 }
      );
    }
    
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º userId –≤ —á–∏—Å–ª–æ
    let numericUserId: number;
    
    if (typeof userId === 'number') {
      numericUserId = userId;
    } else if (typeof userId === 'string') {
      // –ï—Å–ª–∏ userId –≤ —Ñ–æ—Ä–º–∞—Ç–µ "user-12345", –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π ID
      const match = userId.match(/user-(\d+)/);
      if (match) {
        numericUserId = parseInt(match[1]);
      } else {
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
        const { getUserIdByEmail } = await import('@/lib/services/authService');
        const foundUserId = await getUserIdByEmail(userId);
        if (foundUserId) {
          numericUserId = foundUserId;
        } else {
          // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
          numericUserId = Date.now();
          console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID:', numericUserId);
        }
      }
    } else {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç userId' },
        { status: 400 }
      );
    }
    
    const resultId = await saveTestResult({
      userId: numericUserId,
      subject,
      score: Number(score),
      totalQuestions: Number(totalQuestions) || 0,
      correctAnswers: Number(correctAnswers) || 0,
      timeSpent: Number(timeSpent) || 0,
      testData: testData || {}
    });
    
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, ID: ${resultId}`);
    
    return NextResponse.json({ 
      success: true,
      resultId,
      message: '–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞' },
      { status: 500 }
    );
  }
}