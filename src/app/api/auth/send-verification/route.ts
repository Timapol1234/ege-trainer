import { NextRequest, NextResponse } from 'next/server';
import { saveVerificationCode } from '@/lib/services/authService';
import nodemailer from 'nodemailer';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const createTransporter = () => {
  const emailUser = process.env.EMAIL_USER;
  const emailPassword = process.env.EMAIL_PASSWORD;

  if (!emailUser || !emailPassword) {
    throw new Error('EMAIL_USER –∏ EMAIL_PASSWORD –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ .env.local');
  }

  console.log('Creating transporter for email:', emailUser);

  // –î–ª—è Mail.ru
  if (emailUser.includes('mail.ru')) {
    return nodemailer.createTransport({
      host: 'smtp.mail.ru',
      port: 465,
      secure: true, // true –¥–ª—è 465 –ø–æ—Ä—Ç–∞
      auth: {
        user: emailUser,
        pass: emailPassword,
      },
    });
  }
  
  else if (emailUser.includes('yandex.ru') || emailUser.includes('ya.ru')) {
    return nodemailer.createTransport({
      host: 'smtp.yandex.ru',
      port: 465,
      secure: true,
      auth: {
        user: emailUser,
        pass: emailPassword,
      },
    });
  }
  else if (emailUser.includes('mail.ru')) {
    return nodemailer.createTransport({
      host: 'smtp.mail.ru',
      port: 465,
      secure: true,
      auth: {
        user: emailUser,
        pass: emailPassword,
      },
    });
  }
  else if (process.env.SMTP_HOST && process.env.SMTP_USER && process.env.SMTP_PASSWORD) {
    // –ö–∞—Å—Ç–æ–º–Ω—ã–π SMTP
    return nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: parseInt(process.env.SMTP_PORT || '587'),
      secure: process.env.SMTP_SECURE === 'true',
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASSWORD,
      },
      tls: {
        rejectUnauthorized: false
      }
    });
  }
  else {
    throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—á—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å. –£–∫–∞–∂–∏—Ç–µ SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä—É—á–Ω—É—é.');
  }
};

async function sendVerificationEmail(email: string, code: string): Promise<boolean> {
  try {
    const transporter = createTransporter();
    
    // –î–ª—è Mail.ru –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ email –±–µ–∑ –∏–º–µ–Ω–∏
    const fromEmail = process.env.EMAIL_USER; // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–æ—Ç –∂–µ —á—Ç–æ –∏ –≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const siteName = process.env.SITE_NAME || '–ï–ì–≠ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞';
    
    const mailOptions = {
      from: fromEmail, // –ü—Ä–æ—Å—Ç–æ email, –±–µ–∑ –∏–º–µ–Ω–∏
      to: email,
      subject: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ï–ì–≠-–¢—Ä–µ–Ω–µ—Ä',
      html: `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email</title>
            <style>
                * { margin: 0; padding: 0; box-sizing: border-box; }
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; background-color: #f8fafc; padding: 20px; }
                .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 12px; overflow: hidden; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); }
                .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 40px 30px; text-align: center; }
                .header h1 { font-size: 28px; font-weight: 700; margin-bottom: 8px; }
                .header p { opacity: 0.9; font-size: 16px; }
                .content { padding: 40px 30px; background: #ffffff; }
                .greeting { font-size: 18px; margin-bottom: 20px; color: #2d3748; }
                .instruction { font-size: 16px; margin-bottom: 30px; color: #4a5568; line-height: 1.7; }
                .code-container { text-align: center; margin: 30px 0; padding: 20px; background: #f7fafc; border-radius: 8px; border: 2px dashed #cbd5e0; }
                .code { font-size: 42px; font-weight: 800; color: #667eea; letter-spacing: 8px; font-family: 'Courier New', monospace; text-align: center; margin: 10px 0; }
                .warning { background: #fffaf0; border-left: 4px solid #ed8936; padding: 16px; margin: 25px 0; border-radius: 4px; }
                .warning strong { color: #c05621; }
                .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e2e8f0; color: #718096; font-size: 14px; }
                @media (max-width: 600px) {
                  .container { border-radius: 8px; }
                  .header { padding: 30px 20px; }
                  .header h1 { font-size: 24px; }
                  .content { padding: 30px 20px; }
                  .code { font-size: 32px; letter-spacing: 6px; }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üîê –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email</h1>
                    <p>–ï–ì–≠-–¢—Ä–µ–Ω–µ—Ä - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏</p>
                </div>
                <div class="content">
                    <p class="greeting">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
                    <p class="instruction">
                        –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ:
                    </p>
                    <div class="code-container">
                        <div class="code">${code}</div>
                    </div>
                    <div class="warning">
                        <strong>‚ö†Ô∏è –í–∞–∂–Ω–æ:</strong> –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –º–∏–Ω—É—Ç. –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ –µ–≥–æ.
                    </div>
                    <p class="instruction">
                        –ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –ï–ì–≠-–¢—Ä–µ–Ω–µ—Ä–µ, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
                    </p>
                </div>
                <div class="footer">
                    <p>¬© 2024 –ï–ì–≠-–¢—Ä–µ–Ω–µ—Ä. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
                </div>
            </div>
        </body>
        </html>
      `,
      text: `
–ï–ì–≠-–¢—Ä–µ–Ω–µ—Ä - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}

–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.

–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.

–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ –ï–ì–≠-–¢—Ä–µ–Ω–µ—Ä
      `.trim()
    };

    console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –Ω–∞: ${email}`);
    console.log(`üîë –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å: ${fromEmail}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await transporter.verify();
    console.log('‚úÖ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    const result = await transporter.sendMail(mailOptions);
    console.log('‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
      messageId: result.messageId,
      to: email
    });
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:', error);
    
    let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. ';
    
    if (error instanceof Error) {
      if (error.message.includes('sender address must match authenticated user')) {
        errorMessage += '–û—à–∏–±–∫–∞ Mail.ru: –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ EMAIL_FROM –≤ .env.local';
      } else if (error.message.includes('Invalid login') || error.message.includes('Authentication failed')) {
        errorMessage += '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ EMAIL_USER –∏ EMAIL_PASSWORD –≤ .env.local';
      } else if (error.message.includes('Connection timeout')) {
        errorMessage += '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
      } else {
        errorMessage += error.message;
      }
    }
    
    throw new Error(errorMessage);
  }
}

export async function POST(request: NextRequest) {
  try {
    const { email } = await request.json();
    
    if (!email) {
      return NextResponse.json(
        { error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞' },
        { status: 400 }
      );
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞' },
        { status: 400 }
      );
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    const code = Math.floor(100000 + Math.random() * 900000).toString();
    
    console.log(`Generating verification code for: ${email}, code: ${code}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ
    await saveVerificationCode(email, code);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –Ω–∞ email
    await sendVerificationEmail(email, code);
    
    return NextResponse.json({ 
      success: true,
      message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É'
    });
    
  } catch (error) {
    console.error('Send verification error:', error);
    
    const errorMessage = error instanceof Error 
      ? error.message 
      : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
    
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    );
  }
}