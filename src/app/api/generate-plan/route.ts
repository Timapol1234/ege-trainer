// src/app/api/generate-plan/route.ts
import { NextRequest, NextResponse } from 'next/server';

const ML_API_URL = process.env.ML_API_URL || 'http://localhost:8000';

export async function POST(request: NextRequest) {
  try {
    const userData = await request.json();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!userData.currentScore || !userData.targetScore || !userData.examDate) {
      return NextResponse.json(
        { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' },
        { status: 400 }
      );
    }

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ ML —Å–∏—Å—Ç–µ–º—É:', {
      userId: userData.userId,
      currentScore: userData.currentScore,
      targetScore: userData.targetScore,
      examDate: userData.examDate,
      availableHours: userData.availableHoursPerWeek,
      weakAreasCount: userData.weakAreas?.length,
      strongAreasCount: userData.strongAreas?.length
    });

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –æ—Ç ML —Å–∏—Å—Ç–µ–º—ã
    try {
      const response = await fetch(`${ML_API_URL}/generate-plan`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData),
      });

      if (response.ok) {
        const mlResult = await response.json();
        
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω ML-–ø–ª–∞–Ω —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é:', mlResult.confidence);
        
        return NextResponse.json({
          success: true,
          plan: mlResult.plan,
          recommendations: mlResult.recommendations,
          confidence: mlResult.confidence,
          generatedBy: 'ml_system'
        });
      }
    } catch (mlError) {
      console.log('üîÑ ML —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä:', mlError);
    }

    // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    const localPlan = await generateLocalPlan(userData);
    
    return NextResponse.json({
      success: true,
      plan: localPlan,
      recommendations: [],
      confidence: 0.6,
      generatedBy: 'local_fallback',
      note: 'ML —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
    });
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        generatedBy: 'error'
      },
      { status: 500 }
    );
  }
}

// –õ–æ–∫–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞–∫ fallback
async function generateLocalPlan(userData: any) {
  const { localPlanGenerator } = await import('@/lib/services/localPlanGenerator');
  return localPlanGenerator.generateStudyPlan(userData);
}