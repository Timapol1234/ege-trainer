// src/lib/utils/studyPlanUtils.ts
export class StudyPlanUtils {
  static getPlanGenerationData(): PlanGenerationData | null {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const userData = localStorage.getItem('user-profile');
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const testData = localStorage.getItem('assessment-results');
      
      console.log('üîç DEBUG - User data from localStorage:', userData);
      console.log('üîç DEBUG - Test data from localStorage:', testData);
      
      if (!userData) {
        console.warn('‚ùå No user profile found in localStorage');
        return null;
      }

      if (!testData) {
        console.warn('‚ùå No assessment results found in localStorage');
        return null;
      }

      const userProfile = JSON.parse(userData);
      const testResults = JSON.parse(testData);

      console.log('üîç DEBUG - Parsed user profile:', userProfile);
      console.log('üîç DEBUG - Parsed test results:', testResults);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (userProfile.initialScore === undefined || userProfile.targetScore === undefined) {
        console.warn('‚ùå Missing required fields in user profile');
        return null;
      }

      if (!testResults.weakAreas || !testResults.score) {
        console.warn('‚ùå Missing required fields in test results');
        return null;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–ª–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
      const userLevel = this.calculateUserLevel(
        userProfile.initialScore, 
        testResults.score
      );

      const planData = {
        // –î–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        initialScore: userProfile.initialScore,
        targetScore: userProfile.targetScore,
        
        // –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        weakThemes: testResults.weakAreas || [],
        strongThemes: testResults.strongAreas || [],
        testScore: testResults.score,
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        availableHoursPerWeek: userProfile.availableHours || 10,
        examDate: userProfile.examDate ? new Date(userProfile.examDate) : this.getDefaultExamDate(),
        userLevel,
        subjects: userProfile.subjects || ['–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞']
      };

      console.log('üîç DEBUG - Generated plan data:', planData);
      return planData;

    } catch (error) {
      console.error('‚ùå Error getting plan generation data:', error);
      return null;
    }
  }

  private static calculateUserLevel(initialScore: number, testScore: number): string {
    const averageScore = (initialScore + testScore) / 2;
    
    if (averageScore < 40) return 'beginner';
    if (averageScore < 65) return 'intermediate';
    if (averageScore < 85) return 'advanced';
    return 'expert';
  }

  private static getDefaultExamDate(): Date {
    const date = new Date();
    date.setMonth(date.getMonth() + 3);
    return date;
  }

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  static saveUserProfile(profile: {
    initialScore: number;
    targetScore: number;
    availableHours: number;
    examDate?: string;
    subjects: string[];
  }): void {
    try {
      localStorage.setItem('user-profile', JSON.stringify(profile));
      console.log('User profile saved:', profile);
    } catch (error) {
      console.error('Error saving user profile:', error);
    }
  }

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  static saveAssessmentResults(results: {
    score: number;
    weakAreas: string[];
    strongAreas: string[];
  }): void {
    try {
      localStorage.setItem('assessment-results', JSON.stringify(results));
      console.log('Assessment results saved:', results);
    } catch (error) {
      console.error('Error saving assessment results:', error);
    }
  }

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static getUserProfile() {
    try {
      const userData = localStorage.getItem('user-profile');
      return userData ? JSON.parse(userData) : null;
    } catch (error) {
      console.error('Error getting user profile:', error);
      return null;
    }
  }

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  static getAssessmentResults() {
    try {
      const testData = localStorage.getItem('assessment-results');
      return testData ? JSON.parse(testData) : null;
    } catch (error) {
      console.error('Error getting assessment results:', error);
      return null;
    }
  }

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  static clearAllData(): void {
    try {
      localStorage.removeItem('user-profile');
      localStorage.removeItem('assessment-results');
      localStorage.removeItem('user-study-plan');
      console.log('All study plan data cleared');
    } catch (error) {
      console.error('Error clearing data:', error);
    }
  }

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–Ω—è—Ç—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è
  static saveAcceptedPlan(plan: any): void {
    try {
      localStorage.setItem('user-study-plan', JSON.stringify(plan));
      console.log('Study plan saved:', plan);
    } catch (error) {
      console.error('Error saving study plan:', error);
    }
  }

  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è
  static getSavedPlan() {
    try {
      const planData = localStorage.getItem('user-study-plan');
      return planData ? JSON.parse(planData) : null;
    } catch (error) {
      console.error('Error getting saved plan:', error);
      return null;
    }
  }
}